function [Y,Xf,Af] = nn_x_dx_f(X,Xi,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 06-Apr-2021 18:10:02.
%
% [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~) takes these arguments:
%
%   X = 2xTS cell, 2 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
%   Each X{2,ts} = 3xQ matrix, input #2 at timestep ts.
%
%   Xi = 2x2 cell 2, initial 2 input delay states.
%   Each Xi{1,ts} = 1xQ matrix, initial states for input #1.
%   Each Xi{2,ts} = 3xQ matrix, initial states for input #2.
%
%   Ai = 2x0 cell 2, initial 2 layer delay states.
%   Each Ai{1,ts} = 10xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 3xQ matrix, initial states for layer #2.
%
% and returns:
%   Y = 1xTS cell of 2 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
%
%   Xf = 2x2 cell 2, final 2 input delay states.
%   Each Xf{1,ts} = 1xQ matrix, final states for input #1.
%   Each Xf{2,ts} = 3xQ matrix, final states for input #2.
%
%   Af = 2x0 cell 2, final 0 layer delay states.
%   Each Af{1ts} = 10xQ matrix, final states for layer #1.
%   Each Af{2ts} = 3xQ matrix, final states for layer #2.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 0;
x1_step1.gain = 2;
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [0;-0.595569808690427;-0.00103110761531111];
x2_step1.gain = [10.3188359063243;2.04397022129376;1100.01490678172];
x2_step1.ymin = -1;

% Layer 1
b1 = [2.5240335014099031241;0.23689954702136048481;-0.064122331950602365347;0.91738164389239307273;0.29706030249722475967;0.029908581323168124261;-0.5307928646531901995;-0.57074708337366575339;-1.6847049104356002225;2.3439846658118366207];
IW1_1 = [-0.14047012354454851968 0.89478654771570387272;-0.82415310190554003089 -0.67481070026440193033;0.33145385379216607546 -0.66796459612032255126;-0.1331898219776010972 -0.62176707137143039095;0.93253110540118877569 0.65286288863326147336;0.67335260584251588334 -0.75076656291749033212;-0.44730421479367216131 -0.37246975195025971983;-0.80971574421559466828 1.3547098825651502363;-0.52222220804629682078 -0.94852807491949520102;0.092120222022592901379 -0.86600035789914686646];
IW1_2 = [0.21471319789845330628 -0.77454375733416525041 -0.50464498784565381406 -0.81028414971364914887 0.25043427313880428642 0.7796249590081333336;0.30582615640854432515 -1.7170320888736558818 -0.066503235253553880102 -0.81738454331258503238 0.59202621547268052815 0.63262593687372181694;0.042693802973366383469 -0.23329840137483828788 0.12681321503122028327 0.23364974729323703673 0.75350520977896362496 -0.37328349263690047133;0.10847226657828520913 1.1943142325130775561 -0.37301908997237098742 -0.60300072471045940148 -0.38123333031103406876 0.54147372197567733565;-0.41507323389502021049 0.3596482597963140404 0.25601174695594164366 -0.69738603028601220402 0.57818675168672684084 -0.62999682786667487999;-0.20368875451880030791 -0.97764392048782411404 0.1112956619931279173 0.16238346252398774827 1.1053298532575230873 -0.41302836094251182963;-0.71256253538803071557 0.21663727276774652486 0.51869017729468547273 -0.26777710304113877537 -0.31827781052663189909 -0.22798064663331971125;1.0921342338215023204 -0.062859725290405829567 -0.086407729079700165697 -0.23187759152143141983 -0.57724619562134449335 0.50381726544766702869;-0.61499440148794703997 0.56359514197920557166 -0.72372854923097595936 -0.0095413906363387736287 0.66936185218798815999 0.46241589874963578977;0.15965983477963999193 -0.29787741909524273476 0.072694101190387827582 0.76238346907458554025 -1.017829005902121553 0.65932976313033297977];

% Layer 2
b2 = [0.01587979217351237482;0.57191078775746895246;-0.0099869754875068009192];
LW2_1 = [-0.01153681023411060047 -0.26987889595880260041 1.140681231563930087 -0.18409215227904920931 -0.42212259484997999293 -0.32072126029928044177 -0.29428338913192303439 0.54314794770120555789 -0.15056712460769053341 0.25862914988523594273;-0.3495301437125971078 -0.50889124535395524607 1.4238902684873975257 0.17462492817754196595 0.27172339936046785436 -1.6956740633749785019 0.17276842929956554018 -0.3792248835549835162 0.1842007668234283968 -0.18984151569538687543;-0.12801008912048847388 -0.89340752662694988828 -0.20987719229401163856 0.93776782506210509816 -0.52899257696674606422 -1.5291145789227873486 0.2493205472762964614 0.27562828707500380832 0.5050131955545393847 0.32317205374279273089];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [10.3188359063243;2.04397022129376;1100.01490678172];
y1_step1.xoffset = [0;-0.595569808690427;-0.00103110761531111];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end
if (nargin < 2), error('Initial input states Xi argument needed.'); end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
elseif ~isempty(Xi)
    Q = size(Xi{1},2);
else
    Q = 0;
end

% Input 1 Delay States
Xd1 = cell(1,3);
for ts=1:2
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1);
end

% Input 2 Delay States
Xd2 = cell(1,3);
for ts=1:2
    Xd2{ts} = mapminmax_apply(Xi{2,ts},x2_step1);
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+1,3)+1;
    
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1);
    
    % Input 2
    Xd2{xdts} = mapminmax_apply(X{2,ts},x2_step1);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-[1 2]-1,3)+1});
    tapdelay2 = cat(1,Xd2{mod(xdts-[1 2]-1,3)+1});
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
Xf = [Xi(:,xits) X(:,xts)];
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
