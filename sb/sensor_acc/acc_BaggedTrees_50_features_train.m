function [trainedClassifier, validationAccuracy] = acc_BaggedTrees_50_features_train(trainingData)
% [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% Returns a trained classifier and its accuracy. This code recreates the
% classification model trained in Classification Learner app. Use the
% generated code to automate training the same model with new data, or to
% learn how to programmatically train models.
%
%  Input:
%      trainingData: A table containing the same predictor and response
%       columns as those imported into the app.
%
%  Output:
%      trainedClassifier: A struct containing the trained classifier. The
%       struct contains various fields with information about the trained
%       classifier.
%
%      trainedClassifier.predictFcn: A function to make predictions on new
%       data.
%
%      validationAccuracy: A double containing the accuracy in percent. In
%       the app, the History list displays this overall accuracy score for
%       each model.
%
% Use the code to train the model with new data. To retrain your
% classifier, call the function from the command line with your original
% data or new data as the input argument trainingData.
%
% For example, to retrain a classifier trained with the original data set
% T, enter:
%   [trainedClassifier, validationAccuracy] = trainClassifier(T)
%
% To make predictions with the returned 'trainedClassifier' on new data T2,
% use
%   yfit = trainedClassifier.predictFcn(T2)
%
% T2 must be a table containing at least the same predictor columns as used
% during training. For details, enter:
%   trainedClassifier.HowToPredict

% Auto-generated by MATLAB on 03-May-2021 23:58:45


% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'AccelerometerStatic_axisY_stats/ShapeFactor', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp3', 'AccelerometerStatic_axisY_stats/RMS', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp10', 'AccelerometerMoving_axisZ_stats/Skewness', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp4', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp5', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp1', 'AccelerometerStatic_axisY_stats/Std', 'AccelerometerStatic_axisY_ps_spec/BandPower', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp2', 'AccelerometerMoving_axisY_ps_spec/PeakAmp1', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp8', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp6', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp9', 'AccelerometerMoving_axisY_stats/Mean', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp7', 'AccelerometerStatic_axisY_stats/Mean', 'AccelerometerStatic_axisZ_stats/Std', 'AccelerometerStatic_axisY_ps_spec/PeakAmp1', 'AccelerometerStatic_axisY_ps_spec/PeakFreq2', 'AccelerometerStatic_axisZ_stats/ShapeFactor', 'AccelerometerStatic_axisZ_stats/Kurtosis', 'AccelerometerStatic_axisZ_stats/Mean', 'AccelerometerStatic_axisZ_stats/RMS', 'AccelerometerStatic_axisY_ps_spec/PeakAmp2', 'AccelerometerStatic_axisZ_ps_spec/BandPower', 'AccelerometerStatic_axisY_ps_spec/PeakAmp3', 'AccelerometerMoving_axisZ_ps_spec/PeakFreq2', 'AccelerometerMoving_axisZ_stats/Kurtosis', 'AccelerometerMoving_axisY_ps_spec/PeakAmp6', 'AccelerometerMoving_axisY_stats/SINAD', 'AccelerometerMoving_axisZ_ps_spec/PeakAmp4', 'AccelerometerMoving_axisY_ps_spec/PeakAmp5', 'AccelerometerMoving_axisY_stats/SNR', 'AccelerometerMoving_axisY_ps_spec/PeakAmp4', 'AccelerometerMoving_axisZ_ps_spec/PeakAmp5', 'AccelerometerMoving_axisZ_ps_spec/PeakAmp1', 'AccelerometerMoving_axisY_ps_spec/PeakAmp7', 'AccelerometerMoving_axisY_stats/Kurtosis', 'AccelerometerStatic_axisY_ps_spec/PeakAmp4', 'AccelerometerMoving_axisY_ps_spec/PeakAmp3', 'AccelerometerMoving_axisZ_ps_spec/PeakAmp3', 'AccelerometerMoving_axisZ_ps_spec/BandPower', 'AccelerometerMoving_axisY_ps_spec/PeakAmp8', 'AccelerometerMoving_axisY_ps_spec/PeakAmp2', 'AccelerometerMoving_axisZ_stats/Mean', 'AccelerometerStatic_axisY_ps_spec/PeakAmp6', 'AccelerometerStatic_axisY_ps_spec/PeakFreq3', 'AccelerometerMoving_axisY_ps_spec/PeakAmp9'};
predictors = inputTable(:, predictorNames);
response = inputTable.Label;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Train a classifier
% This code specifies all the classifier options and trains the classifier.
template = templateTree(...
    'MaxNumSplits', 3387);
classificationEnsemble = fitcensemble(...
    predictors, ...
    response, ...
    'Method', 'Bag', ...
    'NumLearningCycles', 30, ...
    'Learners', template, ...
    'ClassNames', {'damp_small_bot'; 'damp_small_bot+damp_small_up'; 'damp_small_bot+damps_large'; 'damp_small_up'; 'damps_large+damp_small_up'; 'health'; 'pressure+damp_small_bot'; 'pressure+damp_small_up'; 'pressure+damps_large'; 'pressure+valve1'; 'pressure+valve2'; 'valve1'; 'valve1+damp_small_bot'; 'valve1+damp_small_up'; 'valve1+damps_large'; 'valve1+valve2'; 'valve2'; 'valve2+damp_small_bot'; 'valve2+damp_small_up'; 'valve2+damps_large'});

% Create the result struct with predict function
predictorExtractionFcn = @(t) t(:, predictorNames);
ensemblePredictFcn = @(x) predict(classificationEnsemble, x);
trainedClassifier.predictFcn = @(x) ensemblePredictFcn(predictorExtractionFcn(x));

% Add additional fields to the result struct
trainedClassifier.RequiredVariables = {'AccelerometerMoving_axisY_ps_spec/PeakAmp1', 'AccelerometerMoving_axisY_ps_spec/PeakAmp2', 'AccelerometerMoving_axisY_ps_spec/PeakAmp3', 'AccelerometerMoving_axisY_ps_spec/PeakAmp4', 'AccelerometerMoving_axisY_ps_spec/PeakAmp5', 'AccelerometerMoving_axisY_ps_spec/PeakAmp6', 'AccelerometerMoving_axisY_ps_spec/PeakAmp7', 'AccelerometerMoving_axisY_ps_spec/PeakAmp8', 'AccelerometerMoving_axisY_ps_spec/PeakAmp9', 'AccelerometerMoving_axisY_stats/Kurtosis', 'AccelerometerMoving_axisY_stats/Mean', 'AccelerometerMoving_axisY_stats/SINAD', 'AccelerometerMoving_axisY_stats/SNR', 'AccelerometerMoving_axisZ_ps_spec/BandPower', 'AccelerometerMoving_axisZ_ps_spec/PeakAmp1', 'AccelerometerMoving_axisZ_ps_spec/PeakAmp3', 'AccelerometerMoving_axisZ_ps_spec/PeakAmp4', 'AccelerometerMoving_axisZ_ps_spec/PeakAmp5', 'AccelerometerMoving_axisZ_ps_spec/PeakFreq2', 'AccelerometerMoving_axisZ_stats/Kurtosis', 'AccelerometerMoving_axisZ_stats/Mean', 'AccelerometerMoving_axisZ_stats/Skewness', 'AccelerometerStatic_axisY_ps_spec/BandPower', 'AccelerometerStatic_axisY_ps_spec/PeakAmp1', 'AccelerometerStatic_axisY_ps_spec/PeakAmp2', 'AccelerometerStatic_axisY_ps_spec/PeakAmp3', 'AccelerometerStatic_axisY_ps_spec/PeakAmp4', 'AccelerometerStatic_axisY_ps_spec/PeakAmp6', 'AccelerometerStatic_axisY_ps_spec/PeakFreq2', 'AccelerometerStatic_axisY_ps_spec/PeakFreq3', 'AccelerometerStatic_axisY_stats/Mean', 'AccelerometerStatic_axisY_stats/RMS', 'AccelerometerStatic_axisY_stats/ShapeFactor', 'AccelerometerStatic_axisY_stats/Std', 'AccelerometerStatic_axisZ_ps_spec/BandPower', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp1', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp10', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp2', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp3', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp4', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp5', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp6', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp7', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp8', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp9', 'AccelerometerStatic_axisZ_stats/Kurtosis', 'AccelerometerStatic_axisZ_stats/Mean', 'AccelerometerStatic_axisZ_stats/RMS', 'AccelerometerStatic_axisZ_stats/ShapeFactor', 'AccelerometerStatic_axisZ_stats/Std'};
trainedClassifier.ClassificationEnsemble = classificationEnsemble;
trainedClassifier.About = 'This struct is a trained model exported from Classification Learner R2021a.';
trainedClassifier.HowToPredict = sprintf('To make predictions on a new table, T, use: \n  yfit = c.predictFcn(T) \nreplacing ''c'' with the name of the variable that is this struct, e.g. ''trainedModel''. \n \nThe table, T, must contain the variables returned by: \n  c.RequiredVariables \nVariable formats (e.g. matrix/vector, datatype) must match the original training data. \nAdditional variables are ignored. \n \nFor more information, see <a href="matlab:helpview(fullfile(docroot, ''stats'', ''stats.map''), ''appclassification_exportmodeltoworkspace'')">How to predict using an exported model</a>.');

% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'AccelerometerStatic_axisY_stats/ShapeFactor', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp3', 'AccelerometerStatic_axisY_stats/RMS', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp10', 'AccelerometerMoving_axisZ_stats/Skewness', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp4', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp5', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp1', 'AccelerometerStatic_axisY_stats/Std', 'AccelerometerStatic_axisY_ps_spec/BandPower', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp2', 'AccelerometerMoving_axisY_ps_spec/PeakAmp1', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp8', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp6', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp9', 'AccelerometerMoving_axisY_stats/Mean', 'AccelerometerStatic_axisZ_ps_spec/PeakAmp7', 'AccelerometerStatic_axisY_stats/Mean', 'AccelerometerStatic_axisZ_stats/Std', 'AccelerometerStatic_axisY_ps_spec/PeakAmp1', 'AccelerometerStatic_axisY_ps_spec/PeakFreq2', 'AccelerometerStatic_axisZ_stats/ShapeFactor', 'AccelerometerStatic_axisZ_stats/Kurtosis', 'AccelerometerStatic_axisZ_stats/Mean', 'AccelerometerStatic_axisZ_stats/RMS', 'AccelerometerStatic_axisY_ps_spec/PeakAmp2', 'AccelerometerStatic_axisZ_ps_spec/BandPower', 'AccelerometerStatic_axisY_ps_spec/PeakAmp3', 'AccelerometerMoving_axisZ_ps_spec/PeakFreq2', 'AccelerometerMoving_axisZ_stats/Kurtosis', 'AccelerometerMoving_axisY_ps_spec/PeakAmp6', 'AccelerometerMoving_axisY_stats/SINAD', 'AccelerometerMoving_axisZ_ps_spec/PeakAmp4', 'AccelerometerMoving_axisY_ps_spec/PeakAmp5', 'AccelerometerMoving_axisY_stats/SNR', 'AccelerometerMoving_axisY_ps_spec/PeakAmp4', 'AccelerometerMoving_axisZ_ps_spec/PeakAmp5', 'AccelerometerMoving_axisZ_ps_spec/PeakAmp1', 'AccelerometerMoving_axisY_ps_spec/PeakAmp7', 'AccelerometerMoving_axisY_stats/Kurtosis', 'AccelerometerStatic_axisY_ps_spec/PeakAmp4', 'AccelerometerMoving_axisY_ps_spec/PeakAmp3', 'AccelerometerMoving_axisZ_ps_spec/PeakAmp3', 'AccelerometerMoving_axisZ_ps_spec/BandPower', 'AccelerometerMoving_axisY_ps_spec/PeakAmp8', 'AccelerometerMoving_axisY_ps_spec/PeakAmp2', 'AccelerometerMoving_axisZ_stats/Mean', 'AccelerometerStatic_axisY_ps_spec/PeakAmp6', 'AccelerometerStatic_axisY_ps_spec/PeakFreq3', 'AccelerometerMoving_axisY_ps_spec/PeakAmp9'};
predictors = inputTable(:, predictorNames);
response = inputTable.Label;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Perform cross-validation
partitionedModel = crossval(trainedClassifier.ClassificationEnsemble, 'KFold', 5);

% Compute validation predictions
[validationPredictions, validationScores] = kfoldPredict(partitionedModel);

% Compute validation accuracy
validationAccuracy = 1 - kfoldLoss(partitionedModel, 'LossFun', 'ClassifError');
