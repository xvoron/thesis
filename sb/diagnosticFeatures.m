function [featureTable,ranking,outputEnsemble] = diagnosticFeatures(inputEnsemble)
%DIAGNOSTICFEATURES recreates results in Diagnostic Feature Designer.
%
% Input:
%  inputEnsemble: A file ensemble datastore containing the
%  data as those imported into the app.
%
% Output:
%  featureTable: A table containing all features and condition variables.
%  ranking: A table containing ranking scores for selected features.
%  outputEnsemble: An ensemble datastore containing the computation results.
%
% This function computes features:
%  LeverPosition_stats/ClearanceFactor
%  LeverPosition_stats/CrestFactor
%  LeverPosition_stats/ImpulseFactor
%  LeverPosition_stats/Kurtosis
%  LeverPosition_stats/Mean
%  LeverPosition_stats/PeakValue
%  LeverPosition_stats/RMS
%  LeverPosition_stats/SINAD
%  LeverPosition_stats/SNR
%  LeverPosition_stats/ShapeFactor
%  LeverPosition_stats/Skewness
%  LeverPosition_stats/Std
%  LeverPosition_stats/THD
%  LeverPosition_nonlin/ApproxEntropy
%  LeverPosition_nonlin/CorrelationDim
%  LeverPosition_nonlin/LyapunovExp
%  LeverPosition_ps_spec/PeakAmp1
%  LeverPosition_ps_spec/PeakFreq1
%  LeverPosition_ps_spec/BandPower
%  LeverVelocity_ps_spec/PeakAmp1
%  LeverVelocity_ps_spec/PeakAmp2
%  LeverVelocity_ps_spec/PeakAmp3
%  LeverVelocity_ps_spec/PeakAmp4
%  LeverVelocity_ps_spec/PeakAmp5
%  LeverVelocity_ps_spec/PeakAmp6
%  LeverVelocity_ps_spec/PeakAmp7
%  LeverVelocity_ps_spec/PeakAmp8
%  LeverVelocity_ps_spec/PeakAmp9
%  LeverVelocity_ps_spec/PeakAmp10
%  LeverVelocity_ps_spec/PeakFreq1
%  LeverVelocity_ps_spec/PeakFreq2
%  LeverVelocity_ps_spec/PeakFreq3
%  LeverVelocity_ps_spec/PeakFreq4
%  LeverVelocity_ps_spec/PeakFreq5
%  LeverVelocity_ps_spec/PeakFreq6
%  LeverVelocity_ps_spec/PeakFreq7
%  LeverVelocity_ps_spec/PeakFreq8
%  LeverVelocity_ps_spec/PeakFreq9
%  LeverVelocity_ps_spec/PeakFreq10
%  LeverVelocity_ps_spec/BandPower
%  LeverVelocity_stats/ClearanceFactor
%  LeverVelocity_stats/CrestFactor
%  LeverVelocity_stats/ImpulseFactor
%  LeverVelocity_stats/Kurtosis
%  LeverVelocity_stats/Mean
%  LeverVelocity_stats/PeakValue
%  LeverVelocity_stats/RMS
%  LeverVelocity_stats/SINAD
%  LeverVelocity_stats/SNR
%  LeverVelocity_stats/ShapeFactor
%  LeverVelocity_stats/Skewness
%  LeverVelocity_stats/Std
%  LeverVelocity_stats/THD
%
% This function ranks computed feautres using algorithms:
%  One-way ANOVA
%  Kruskal-Wallis
%
% Organization of the function:
% 1. Compute signals/spectra/features
% 2. Extract computed features into a table
% 3. Rank features
%
% Modify the function to add or remove data processing, feature generation
% or ranking operations.

% Auto-generated by MATLAB on 09-Apr-2021 19:35:09

% Configure input ensemble
inputEnsemble.DataVariables = ["LeverPosition";"LeverPosition_stats";"LeverPosition_nonlin";"LeverPosition_ps";"LeverPosition_ps_spec";"LeverVelocity";"LeverVelocity_ps";"LeverVelocity_ps_spec";"LeverVelocity_stats"];
inputEnsemble.ConditionVariables = "Label";

% Create output ensemble.
outputEnsemble = inputEnsemble;


% Gather all features into a table.
featureTable = readFeatureTable(outputEnsemble);

% Feature ranking for FeatureTable1
selectedFeatureNames = ["LeverPosition_stats/ClearanceFactor","LeverPosition_stats/CrestFactor","LeverPosition_stats/ImpulseFactor","LeverPosition_stats/Kurtosis","LeverPosition_stats/Mean","LeverPosition_stats/PeakValue","LeverPosition_stats/RMS","LeverPosition_stats/SINAD","LeverPosition_stats/SNR","LeverPosition_stats/ShapeFactor","LeverPosition_stats/Skewness","LeverPosition_stats/Std","LeverPosition_stats/THD","LeverPosition_nonlin/ApproxEntropy","LeverPosition_nonlin/CorrelationDim","LeverPosition_nonlin/LyapunovExp","LeverPosition_ps_spec/PeakAmp1","LeverPosition_ps_spec/PeakFreq1","LeverPosition_ps_spec/BandPower","LeverVelocity_ps_spec/PeakAmp1","LeverVelocity_ps_spec/PeakAmp2","LeverVelocity_ps_spec/PeakAmp3","LeverVelocity_ps_spec/PeakAmp4","LeverVelocity_ps_spec/PeakAmp5","LeverVelocity_ps_spec/PeakAmp6","LeverVelocity_ps_spec/PeakAmp7","LeverVelocity_ps_spec/PeakAmp8","LeverVelocity_ps_spec/PeakAmp9","LeverVelocity_ps_spec/PeakAmp10","LeverVelocity_ps_spec/PeakFreq1","LeverVelocity_ps_spec/PeakFreq2","LeverVelocity_ps_spec/PeakFreq3","LeverVelocity_ps_spec/PeakFreq4","LeverVelocity_ps_spec/PeakFreq5","LeverVelocity_ps_spec/PeakFreq6","LeverVelocity_ps_spec/PeakFreq7","LeverVelocity_ps_spec/PeakFreq8","LeverVelocity_ps_spec/PeakFreq9","LeverVelocity_ps_spec/PeakFreq10","LeverVelocity_ps_spec/BandPower","LeverVelocity_stats/ClearanceFactor","LeverVelocity_stats/CrestFactor","LeverVelocity_stats/ImpulseFactor","LeverVelocity_stats/Kurtosis","LeverVelocity_stats/Mean","LeverVelocity_stats/PeakValue","LeverVelocity_stats/RMS","LeverVelocity_stats/SINAD","LeverVelocity_stats/SNR","LeverVelocity_stats/ShapeFactor","LeverVelocity_stats/Skewness","LeverVelocity_stats/Std","LeverVelocity_stats/THD"];

% Get selected features and labels for classification ranking
selectedFeatureValues = featureTable{:,selectedFeatureNames};
label = featureTable{:,"Label"};

% Convert label to numeric values
if iscategorical(label)
    label = string(label);
end
group = grp2idx(label);

% Initialize an empty matrix to store ranking scores
score = zeros(numel(selectedFeatureNames),0);

% Initialize a string array to store ranking method names
methodList = strings(0);

%% One-way ANOVA
% Normalize features using minmax.
fNorm = (selectedFeatureValues-min(selectedFeatureValues,[],1))./(max(selectedFeatureValues,[],1)-min(selectedFeatureValues,[],1));

% Compute ranking score using One-Way ANOVA.
numFeatures = size(fNorm,2);
z = zeros(numFeatures,1);
for k = 1:numFeatures
    [~,tbl] = anova1(fNorm(:,k),group,'off');
    % Get the F-statistic from the output of one-way ANOVA.
    stats = tbl{2,5};
    if ~isempty(stats)
        z(k) = stats;
    end
end

% Append new score and method name.
score = [score,z];
methodList = [methodList,"One-way ANOVA"];

%% Kruskal-Wallis
% Normalize features using minmax.
fNorm = (selectedFeatureValues-min(selectedFeatureValues,[],1))./(max(selectedFeatureValues,[],1)-min(selectedFeatureValues,[],1));

% Compute ranking score using Kruskal-Wallis.
numFeatures = size(fNorm,2);
z = zeros(numFeatures,1);
for k=1:numFeatures
    [~,tbl] = kruskalwallis(fNorm(:,k),group,'off');
    % Get test statistics from the Kruskal-Wallis test.
    stats = tbl{2,5};
    if ~isempty(stats)
        z(k) = stats;
    end
end

% Weight score by correlation importance.
z = correlationWeightedScore(fNorm,z,1);

% Append new score and method name.
score = [score,z];
methodList = [methodList,"Kruskal-Wallis"];


%% Create ranking result table
featureColumn = table(selectedFeatureNames(:),'VariableNames',{'Features'});
ranking = [featureColumn array2table(score,'VariableNames',methodList)];
ranking = sortrows(ranking,'Kruskal-Wallis','descend');

% Set SelectedVariables to select variables to read from the ensemble.
outputEnsemble.SelectedVariables = unique([outputEnsemble.DataVariables;outputEnsemble.ConditionVariables;outputEnsemble.IndependentVariables],'stable');
end
