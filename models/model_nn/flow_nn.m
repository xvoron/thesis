function [Y,Xf,Af] = flow_nn(X,Xi,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 06-Apr-2021 16:10:04.
%
% [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~) takes these arguments:
%
%   X = 2xTS cell, 2 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
%   Each X{2,ts} = 3xQ matrix, input #2 at timestep ts.
%
%   Xi = 2x2 cell 2, initial 2 input delay states.
%   Each Xi{1,ts} = 3xQ matrix, initial states for input #1.
%   Each Xi{2,ts} = 3xQ matrix, initial states for input #2.
%
%   Ai = 2x0 cell 2, initial 2 layer delay states.
%   Each Ai{1,ts} = 15xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 3xQ matrix, initial states for layer #2.
%
% and returns:
%   Y = 1xTS cell of 2 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
%
%   Xf = 2x2 cell 2, final 2 input delay states.
%   Each Xf{1,ts} = 3xQ matrix, final states for input #1.
%   Each Xf{2,ts} = 3xQ matrix, final states for input #2.
%
%   Af = 2x0 cell 2, final 0 layer delay states.
%   Each Af{1ts} = 15xQ matrix, final states for layer #1.
%   Each Af{2ts} = 3xQ matrix, final states for layer #2.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0;0];
x1_step1.gain = [2;2;2];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [-0.00103110761531111;-0.00102195610940813;-0.00102195610940813];
x2_step1.gain = [1100.01490678172;1118.78654702809;1107.44730529];
x2_step1.ymin = -1;

% Layer 1
b1 = [1.6828391539838487567;1.483408637734065616;1.369604566881742036;1.1292739858142817333;0.74467222788514864096;-0.7242322430351515461;-0.21942987900294153025;0.18746688084529922191;-0.50277237561159626722;0.44052566258968189894;-0.74055594488142251208;1.1932614198634612368;1.2222381017417693894;1.4349477773504077938;1.6736812743001419079];
IW1_1 = [-0.67633259021542690981 0.23456694664622057545 -0.59809085136774209346 0.3861274420327788226 -0.26237922294340110252 0.36476983004545460165;-0.67390383893167893348 0.5066199628179416381 0.47796109297606576005 0.19011323400159077512 0.44346222009478974968 -0.57703406217866204386;-0.42620801486142734227 -0.44326491285997926539 0.87815342953374908586 -0.24885151198142069218 0.37173040847869570635 0.66515049819905902595;-0.73535147461600958163 0.68551761185436876911 -0.58019551519182199772 0.52589209745724352363 -0.22596702661626968944 -0.094631140348851019994;-0.68105774611235903038 -0.38147631782576413295 -0.45671351915050467651 -0.39114312289154862246 -0.72350876373678429943 -0.11170086758455130549;0.41696080333287616204 -0.47674703843845961382 -0.60811342514807387172 -0.59496571873350589943 0.39274022828535731788 0.84523238057231864229;0.74352656495882574195 -0.56302828839711582809 0.51344006617364801315 -0.61881270486524142527 -0.26275170730980718092 0.079178697690695132305;0.51303518032098016644 -0.81109213754608466829 0.3315026664661531175 -0.42923338072542616128 0.58161142156111533819 -0.68628170273116528843;-0.66399276278190222378 -0.61427602332205688551 0.63205382453636882456 0.597483378549584776 -0.26736717080535771229 0.0020518421653567247426;0.4895901087763060433 0.42454400013594445484 0.34719233743101141076 -0.62370601082607968202 0.098831478163087474464 -0.49011023431091982339;-0.64496441457767261785 0.6213257210161363675 0.034113467135312540435 0.39762876543208952596 -0.18215250852716929897 0.71259038056078349843;1.0493047443627829818 -0.051537973115707048921 0.24134433899982743466 -0.51000004347093386148 0.046564034814495371128 -0.69504370521403091576;0.25112926718527361913 -0.737632058326372686 -0.72908210082628222004 -0.75636777225075602082 -0.32983343320373748053 -0.43132890545239777058;0.29326713154727007682 0.65755809015668786888 -0.39849665640833814573 0.83272420299369764862 0.19528347294423836766 0.46805188903046024418;0.76961089990895203972 -0.32106137547863272674 0.51363855722535500803 0.56935281598650344659 0.56615462941862704227 0.093738406699282114665];
IW1_2 = [0.43266640418233492937 0.61114687523983068917 -0.59550003604971790683 -0.53392260119190382284 0.64214056117427176229 0.65365097692384976913;-0.15847909960239289773 0.57084003522791382235 -0.1734768567106922954 0.39379846585843425455 -0.44167902620718763051 -0.97138227017972889055;0.5991275202812004208 -0.12375304469779840888 0.63763597232700308659 0.20390494412559337367 -0.051985242975653322972 0.26508927850312941077;-0.38787642313446740738 -0.1430383085312032232 0.23051649754061445674 0.63422434053159515432 0.68998690651855343337 0.20207468117628291093;-0.079577759429273586811 -0.58071247940794912257 -0.74058561080609031091 0.38404975598499696554 0.13379516524145099177 0.68244014879189129896;-0.33503251491167912457 0.057242624848908026103 0.067765876416330167453 -0.51022563593808278881 0.074896718204285478437 0.73743478914259752433;-0.84587957187124440672 -0.31276716645507635084 0.49969725317952651267 -0.047273358567834378174 0.47786377573049926282 -0.4962386352523791011;0.25491769032845434939 0.025658843860559200911 -0.66016435749448698633 -0.39897441527352561774 -0.51598465373179658311 0.14219113109657213756;0.24100113599500230799 0.15905376073055513264 -0.82764819812477052885 0.31174609965421573587 0.057275078052700781339 -0.5606920677978272094;0.59972773907152510109 -0.89447120834459636907 0.0129777947148695047 0.10233643678917411779 0.62218252103003157671 -0.43419200466775720315;0.2572207484142284839 0.38029962520039845009 -0.82023083316448008873 -0.6536016203922115908 -0.32967490762863560505 0.4811452538124781908;0.13531827893333328583 -0.33019556761957313817 -0.61486379102636989913 0.074197433735510548436 0.34809802748097501413 0.39788090138180298716;-0.63579184825495804745 -0.32718369251288564881 0.60985311388318663717 0.42121236848416698795 0.31498779560874667904 -0.2705170867193918971;0.23586794143898395792 -0.27065208508151433753 -0.55087223078401026388 -0.61676052005463810612 0.093835129358739180483 0.76210134109951244152;-0.36656216233813998517 0.18728967637715129846 0.18122574741052499547 0.5957651380931080487 0.73724216530066166708 -0.69769826996305495115];

% Layer 2
b2 = [-0.10959262149498791294;-0.20165997585466893804;0.46673292681928435499];
LW2_1 = [0.51238690682602561211 -0.91461084388836844106 -0.12622188676688667064 -0.40130938559168299884 -0.45640989254501246331 0.18023222077854858525 -0.33780909210386844688 -0.10268318769693376979 -0.29442265004725426403 0.17698647476675027912 -0.95505382258044790866 0.21900500034249362202 0.60732163248693793456 0.38712190911633392876 0.34009088026897893453;-0.2432249304849252447 -0.40573099297467696278 0.48221902771391383924 0.80081173259516902352 0.55084980492568003108 0.7321616379879885006 0.28234837375743471188 -0.83467035568848790827 0.78837166553927817692 0.73206182502271222035 0.28590883454154536469 0.76408865248173796214 -0.25541006385400116807 -0.41801523132001855432 0.24995531352641994771;-0.53707391563188955352 -0.025775856951742323608 0.28200868994891575836 0.32549613819355682764 -0.88532273325320176571 0.14967722872867661454 -0.52874097275422526909 -0.82165474495489543294 0.41983865327471397988 -0.51694550464602562201 0.27973154262355603983 0.4300527302879522118 0.65003599744331130861 -0.53112846024063997685 -0.38192627561472775044];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1100.01490678172;1118.78654702809;1107.44730529];
y1_step1.xoffset = [-0.00103110761531111;-0.00102195610940813;-0.00102195610940813];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end
if (nargin < 2), error('Initial input states Xi argument needed.'); end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
elseif ~isempty(Xi)
    Q = size(Xi{1},2);
else
    Q = 0;
end

% Input 1 Delay States
Xd1 = cell(1,3);
for ts=1:2
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1);
end

% Input 2 Delay States
Xd2 = cell(1,3);
for ts=1:2
    Xd2{ts} = mapminmax_apply(Xi{2,ts},x2_step1);
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+1,3)+1;
    
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1);
    
    % Input 2
    Xd2{xdts} = mapminmax_apply(X{2,ts},x2_step1);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-[1 2]-1,3)+1});
    tapdelay2 = cat(1,Xd2{mod(xdts-[1 2]-1,3)+1});
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
Xf = [Xi(:,xits) X(:,xts)];
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
