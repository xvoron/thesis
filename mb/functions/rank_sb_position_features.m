function [featureTable,ranking,outputTable] = rank_sb_position_features(inputData)
%DIAGNOSTICFEATURES recreates results in Diagnostic Feature Designer.
%
% Input:
%  inputData: A table or a cell array of tables/matrices containing the
%  data as those imported into the app.
%
% Output:
%  featureTable: A table containing all features and condition variables.
%  ranking: A table containing ranking scores for selected features.
%  outputTable: A table containing the computation results.
%
% This function computes features:
%  LeverPosition_stats/ClearanceFactor
%  LeverPosition_stats/CrestFactor
%  LeverPosition_stats/ImpulseFactor
%  LeverPosition_stats/Kurtosis
%  LeverPosition_stats/Mean
%  LeverPosition_stats/PeakValue
%  LeverPosition_stats/RMS
%  LeverPosition_stats/SINAD
%  LeverPosition_stats/SNR
%  LeverPosition_stats/ShapeFactor
%  LeverPosition_stats/Skewness
%  LeverPosition_stats/Std
%  LeverPosition_stats/THD
%
% This function ranks computed feautres using algorithms:
%  Kruskal-Wallis
%
% Organization of the function:
% 1. Compute signals/spectra/features
% 2. Extract computed features into a table
% 3. Rank features
%
% Modify the function to add or remove data processing, feature generation
% or ranking operations.

% Auto-generated by MATLAB on 21-May-2021 14:40:25

% Create output ensemble.
outputEnsemble = workspaceEnsemble(inputData,'DataVariables',["LeverPosition_stats/ClearanceFactor";"LeverPosition_stats/CrestFactor";"LeverPosition_stats/ImpulseFactor";"LeverPosition_stats/Kurtosis";"LeverPosition_stats/Mean";"LeverPosition_stats/PeakValue";"LeverPosition_stats/RMS";"LeverPosition_stats/SINAD";"LeverPosition_stats/SNR";"LeverPosition_stats/ShapeFactor";"LeverPosition_stats/Skewness";"LeverPosition_stats/Std";"LeverPosition_stats/THD"],'ConditionVariables',"Label");


% Gather all features into a table.
featureTable = readFeatureTable(outputEnsemble);

% Feature ranking for FeatureTable1
selectedFeatureNames = ["LeverPosition_stats/ClearanceFactor","LeverPosition_stats/CrestFactor","LeverPosition_stats/ImpulseFactor","LeverPosition_stats/Kurtosis","LeverPosition_stats/Mean","LeverPosition_stats/PeakValue","LeverPosition_stats/RMS","LeverPosition_stats/SINAD","LeverPosition_stats/SNR","LeverPosition_stats/ShapeFactor","LeverPosition_stats/Skewness","LeverPosition_stats/Std","LeverPosition_stats/THD"];

% Get selected features and labels for classification ranking
selectedFeatureValues = featureTable{:,selectedFeatureNames};
label = featureTable{:,"Label"};

% Convert label to numeric values
if iscategorical(label)
    label = string(label);
end
group = grp2idx(label);

% Initialize an empty matrix to store ranking scores
score = zeros(numel(selectedFeatureNames),0);

% Initialize a string array to store ranking method names
methodList = strings(0);

%% Kruskal-Wallis
% Normalize features using minmax.
fNorm = (selectedFeatureValues-min(selectedFeatureValues,[],1))./(max(selectedFeatureValues,[],1)-min(selectedFeatureValues,[],1));

% Compute ranking score using Kruskal-Wallis.
numFeatures = size(fNorm,2);
z = zeros(numFeatures,1);
for k=1:numFeatures
    [~,tbl] = kruskalwallis(fNorm(:,k),group,'off');
    % Get test statistics from the Kruskal-Wallis test.
    stats = tbl{2,5};
    if ~isempty(stats)
        z(k) = stats;
    end
end

% Weight score by correlation importance.
z = correlationWeightedScore(fNorm,z,1);

% Append new score and method name.
score = [score,z];
methodList = [methodList,"Kruskal-Wallis"];


%% Create ranking result table
featureColumn = table(selectedFeatureNames(:),'VariableNames',{'Features'});
ranking = [featureColumn array2table(score,'VariableNames',methodList)];
ranking = sortrows(ranking,'Kruskal-Wallis','descend');

% Set SelectedVariables to select variables to read from the ensemble.
outputEnsemble.SelectedVariables = unique([outputEnsemble.DataVariables;outputEnsemble.ConditionVariables;outputEnsemble.IndependentVariables],'stable');

% Gather results into a table.
outputTable = readall(outputEnsemble);
end
