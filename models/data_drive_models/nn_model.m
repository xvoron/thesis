function [y1,xf1,xf2] = nn_model(x1,x2,xi1,xi2)
%NN_MODEL neural network simulation function.
%
% Auto-generated by MATLAB, 06-Apr-2021 23:33:13.
% 
% [y1,xf1,xf2] = nn_model(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 1xTS matrix, input #1
%   x2 = 3xTS matrix, input #2
%   xi1 = 1x2 matrix, initial 2 delay states for input #1.
%   xi2 = 3x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 1x2 matrix, final 2 delay states for input #1.
%   xf2 = 3x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 0;
x1_step1.gain = 2;
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [0;-0.595569808690427;-0.00103110761531111];
x2_step1.gain = [10.3188359063243;2.04397022129376;1100.01490678172];
x2_step1.ymin = -1;

% Layer 1
b1 = [-1.93044010371523167;-1.4928867462370765118;0.9902615266109214831;0.19653975242139223867;-0.18630113227253017327;-0.53534811860235886893;-0.3840689805338913243;1.1526205145408658925;1.4740080139950222371;-0.51607744533175747836];
IW1_1 = [1.0023917735657368322 1.4937896564328325688;0.80122056608910030562 -0.40487507073781081601;-0.84850916884639038251 1.6366123806171113397;-0.48640793657545172701 0.68247138991704858757;-0.58844703292188738075 1.1316114447458824888;-0.54156121612963437073 -0.11719155996604829761;-0.15293469697109984828 0.525246677158975106;0.3318933226777490697 -0.63605810562413966913;0.33866581727946198921 0.33132782598607696256;-0.16849908195984786285 -1.3292004689946002038];
IW1_2 = [0.25866833484467377513 2.1556562425721992327 -0.39455829378499268634 -0.51673712551686756811 -0.11606769901152584612 -0.017566443599492727323;0.10115572044623111214 2.2242922432170022518 -0.39946699877070701579 -0.68620480640794678795 0.056018225213645779503 0.051035291879862658415;-0.70332485740100114668 1.1200480900781701887 -0.42401155769221210434 0.45192745987686050446 0.89765035468242104777 0.0058761383915550777918;0.70324759147351700861 -0.31080809444199652969 -0.21348413551875425331 -0.74574438293263922706 0.85035681286879849505 0.025977190721368694643;0.26916427370709838929 -0.88685624159153597645 1.0947828586611907387 -0.11018754956476396745 -0.20210912844574482894 0.49037702575918445946;-0.47057019603826694132 -0.12357643614079301397 0.17658812766370932112 -0.29038438923203446773 -0.037642512805971313494 -0.11576029551292098263;-0.33132806256396968303 -0.15141707310138310949 0.0032977269436463489509 0.7248146864586839655 0.20370415104095360159 -0.014281380776711554217;0.13237753863793746967 -1.7196502092559251551 0.31796412053668982045 0.2203044286397972118 -0.16115013638497369119 -0.019010447519618736689;1.1194372762758311168 -0.21236206322189846163 0.0085266506804261704699 -0.34246723406451418104 0.07757889873404309744 -0.014036191218351323079;0.84527094176778305723 -0.48097539942379946565 -0.053152541990121884852 0.12668946836030917091 0.58856255066207219251 0.0063511114290341463134];

% Layer 2
b2 = [1.1213196874211397436;1.2950186410313635488;0.42025022099857700653];
LW2_1 = [0.037496958751492233397 -0.073174754759225066336 0.068057032386798943513 -0.60952358220508806586 -0.023114403901514795486 -0.57549521997420571839 2.0631648696301030377 -0.098266397898121610188 -0.59496181654046675913 0.87148447253126437584;0.49088278432745535707 -0.65534559770433731263 0.78364015527081209989 -1.8337201926755519743 0.036103399202431697701 -0.33089603695031483133 0.16562586251980163099 -1.5318537822519875391 -0.7924709922663135675 0.62035645280889151199;0.15715540193695684557 -0.010073772981736332788 0.46021152991501856899 -0.35715825440994236617 0.77897417233550336757 0.15932440258296109992 -0.29402375542101000239 -0.31441942740404327239 -0.2184164056671606402 0.64251368247982221238];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [10.3188359063243;2.04397022129376;1100.01490678172];
y1_step1.xoffset = [0;-0.595569808690427;-0.00103110761531111];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(1,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),2,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
